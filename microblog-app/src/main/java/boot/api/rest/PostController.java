package boot.api.rest;

import boot.api.rest.dto.CreatePostDto;
import boot.api.rest.dto.NotFoundErrorResponse;
import boot.api.rest.dto.PostDto;
import boot.dal.model.Post;
import boot.dal.model.User;
import boot.dal.repositories.PostRepository;
import boot.dal.repositories.UserRepository;
import boot.dal.repositories.VoteRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/post") // This means URL's start with /demo (after Application path)
public class PostController {
    @Autowired // This means to get the bean called userRepository, Which is auto-generated by Spring, we will use it to handle the data
    private PostRepository postRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private VoteRepository votesRepository;

    @RequestMapping(method = RequestMethod.POST)
    public PostDto create(@RequestBody CreatePostDto createPostDto){

        List<User> users = userRepository.findByName(createPostDto.getUserName());
        if(users.isEmpty())
            throw new NotFoundErrorResponse("user " + createPostDto.getUserName() + " does not exist.");

        Post post = new Post();
        post.setCreator(users.get(0))
                .setSubject(createPostDto.getSubject())
                .setText(createPostDto.getText());

        Post saveResult = postRepository.save(post);
        return toDto(saveResult)
                .setUserName(createPostDto.getUserName());
    }

    @RequestMapping(method = RequestMethod.GET, value="/{postId}")
    public PostDto get(@PathVariable int postId){
        Post post = postRepository.findOne(postId);
        if(post == null)
            throw new NotFoundErrorResponse("post #" + postId + " does not exist.");
        int score = votesRepository.sumScore(postId);
        return toDto(post)
                .setUserName(post.getCreator().getName())
                .setScore(score);
    }

    private static PostDto toDto(Post post){
        return new PostDto().setCreationDate(post.getCreationDate())
                .setId(post.getId()).setSubject(post.getSubject())
                .setText(post.getText()).setCreationDate(post.getCreationDate())
                .setUpdateDate(post.getUpdateDate());
    }
}
